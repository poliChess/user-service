scalar Date

type Query {
  users: [User]!
  user(id: ID!): User
  findUser(username: String!): User
  findUsers(usernames: [String]!): [User]!
}

type Mutation {
  authenticate(username: String!, password: String!): UserResponse!

  addUser(mail: String!, username: String!, password: String!): StandardStatus!
  updateUser(id: ID!, mail: String, username: String, password: String,
             playedGames: Int, wonGames: Int, rating: Int): UserResponse!
  deleteUser(id: ID!): StandardStatus!

  getOrAddGoogleUser(id: ID!, mail: String, username: String): UserResponse!
}

type User {
  id: ID!
  mail: String!
  username: String!

  playedGames: Int!
  wonGames: Int!
  rating: Int!
  avatar: String!

  lastLogin: Date
}

type StandardStatus implements Status {
  success: Boolean!
  message: String!
}

type UserResponse implements Status {
  user: User
  success: Boolean!
  message: String!
}

interface Status {
  success: Boolean!
  message: String!
}
